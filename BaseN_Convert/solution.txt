import sys
import math
n = int(input())
number = int(input())

# my solution: 
def baseN(num,b,numerals="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"):
    return ((num == 0) and numerals[0]) or (baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b])

print( baseN(number,n))



# other solution 
l=[]

a="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
while number!=0:
    l+=[number%n]
    number//=n
l=l[::-1]
print("".join([a[i]for i in l]))

# other solution Haskell
import System.IO
import Control.Monad
import Data.Char

main :: IO ()
main = do
    hSetBuffering stdout NoBuffering -- DO NOT REMOVE
    
    -- Auto-generated code below aims at helping you parse
    -- the standard input according to the problem statement.
    
    input_line <- getLine
    let n = read input_line :: Int
    input_line <- getLine
    let number = read input_line :: Int
    
    -- hPutStrLn stderr "Debug messages..."
    
    -- Write answer to stdout
    --putStrLn . show $ (n, number)
    --putStrLn . show . toBase n $ number
    putStrLn . map toCh . toBase n $ number

toBase :: Int -> Int -> [Int]
toBase b = reverse . f
  where
    f n | n `div` b == 0  = [n]
        | otherwise  = (n `mod` b) : f (n `div` b)

toCh n |  0 <= n && n <= 9   = chr $ ord '0' + n
       | 10 <= n && n <= 35  = chr $ ord 'a' + (n-10)
       | otherwise           = chr $ ord 'A' + (n-36)
       
       
